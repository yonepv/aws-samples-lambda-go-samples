version: 0.2

env:
  variables:
    # This S3 bucket will be used to store the packaged Lambda deployment bundle.
    # Make sure to provide a valid S3 bucket name (it must exist already).
    # The AWS CodeBuild IAM role must allow write access to it.
    S3_BUCKET: "pmaddox-public2"
    PACKAGE: "github.com/aws-samples/lambda-go-samples"
    GO_VERSION: 1.19

phases:

  install:
    commands:

      # AWS Codebuild Go images use /go for the $GOPATH so let's copy our 
      # application source code into that directory structure.
      - mkdir -p "/go/src/$(dirname ${PACKAGE})"
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/${PACKAGE}" 
      
      # Print all environment variables (handy for AWS CodeBuild logs)
      - env

      # Install golint
      #- go get -u github.com/golang/lint/golint
      - go get -u golang.org/x/lint/golint
      #- go get -u https://github.com/golang/lint

      # install govulncheck to scan code
      - echo install govulncheck
      - go install golang.org/x/vuln/cmd/govulncheck@latest   
      #- cp $GOPATH/bin/govulncheck /usr/local/bin/
      - workdir=`pwd`
      - echo $workdir
      - ls -la  

  pre_build: 
    on-failure: CONTINUE
    commands:

      # Make sure we're in the project directory within our GOPATH
      - cd "/go/src/${PACKAGE}"

      # Fetch all dependencies
      - go get -t ./...

      # Ensure code passes all lint tests
      - golint -set_exit_status

      # Check the Go code for common problems with 'go vet'
      - go vet .

      # Run all tests included with our application
      - go test .

      # Vulnerability detection using govulncheck
      #- govulncheck
      - which govulncheck
      #- .$GOPATH/bin/govulncheck ./...
      - echo trying to execute govulncheck on project
      #- .$GOPATH/bin/govulncheck -json ./...
      #- govulncheck -json ./...
      #- cd $GOPATH/bin      
      #- pwd
      #- ls -la
      - currentphase="govulncheck"
      #- govulncheck ./...      
      - govulncheck -json ./... > lambda-go-samples-govulncheck-results.json
      - echo after govulncheck...
      #- cd $workdir      
      - pwd
      - ls -la        
    finally:
      - echo will continue process even if there are errors.      

  build:
    commands:

      # Build our go application
      - go build -o main

      # Package our application with AWS SAM
      #- aws cloudformation package --template-file template.yml --s3-bucket ${S3_BUCKET} --output-template-file packaged.yml

artifacts:
  files:
    - packaged.yml
